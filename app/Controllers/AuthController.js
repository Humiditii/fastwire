import Auth from '../Models/Auth';
import Pin from '../Models/Pin';
import Util from '../utils/Utility';

const {appError, randomStr, mailer, api_response} = Util

class AuthController{
    static async signup(req, res, next){
        const {firstname, lastname, email, address, role, pin} = req.body;

        if(!pin){
            // Admin authenication
            if(role == 'Admin'){
                // check if this admin does not exist before
                const admin_exist = await Auth.findOne({email:email})
                if(admin_exist){
                    //check if the account is not verified
                    const is_verified = admin_exist.account_verified.is_verified ? true : false
                    if(!is_verified){
                        const verifyUrl =`${req.protocol}://${req.get('host')}/api/v1/auth/verify/${admin_exist.account_verified.token}`;
                        mailer().sendMail({
                            to: email,
                            from: 'fastwire.com',
                            subject: 'Verify Your Account',
                            html:'<h1>Account Verification Link.</h1> <br/><p>Please Click the link below to confirm your account. ' + verifyUrl
                    }).then( resend => {
                        const api_res = {
                            res: res,
                            statusCode: 201,
                            message: `verification link resent, please verify your account`,
                            data: null
                        }
                        return api_response(api_res)
                        }).catch( err => {
                            return appError(err, next)
                        })
                    }else{
                        const err = {}
                        err.message = 'Email matched to an admin, please proceed to login'
                        err.statusCode = 400
                        return appError(err, next)
                    }
                    
                }else{

                    const token = randomStr(8) + email
                    const verifyUrl =`${req.protocol}://${req.get('host')}/api/v1/auth/verify/${token}`;

                    const new_admin = new Auth({
                        firstname: firstname,
                        lastname: lastname,
                        email: email,
                        address: address,
                        role: role,
                        account_verified: {
                            token: token
                        },
                        account_plan: {
                            expiry_date: Date.now() + 10*24*3600*1000, // 10 days
                            days_left: 10*24*3600*1000  

                        }
                    })
                    mailer().sendMail({
                        to: email,
                        from: 'fastwire.com',
                        subject: 'Verify Your Account',
                        html:'<h1>Account Verification Link.</h1> <br/><p>Please Click the link below to confirm your account. ' + verifyUrl
                    }).then( sent => {
                        new_admin.save().then( signed_admin => {
                            const api_res = {
                                res: res,
                                statusCode: 201,
                                message: `${signed_admin.email} signed up successfully, please proceed to verify your account within the next 10 days`,
                                data: null
                            }
                            return api_response(api_res)
                        }).catch( err => {
                            return appError(err, next)
                        })
                    }).catch( err=> {
                        return appError(err, next)
                    })
                }
            }else{
                const err = {}
                err.message = 'User must provide a pin generated by an admin';
                err.statusCode = 400;
                return appError(err, next)
            }
        }else{
            const find_pin = await Pin.findOne({pin: pin})

            const pin_get = find_pin ? find_pin.pin : false

            if(!pin_get){
                // incorrect pin
            }else{

                const token = randomStr(8) + email
                const verifyUrl =`${req.protocol}://${req.get('host')}/api/v1/auth/verify/${token}`;

                const new_user = new Auth({
                    firstname: firstname,
                    lastname: lastname,
                    email: email,
                    address: address,
                    role: role,
                    pin: pin_get,
                    account_verified: {
                        token: token
                    }
                })

                mailer().sendMail({
                    to: email,
                    from: 'fastwire.com',
                    subject: 'Verify Your Account',
                    html:'<h1>Account Verification Link.</h1> <br/><p>Please Click the link below to confirm your account. ' + verifyUrl
                }).then( sent => {
                    new_user.save().then( saved_user => {
                        try {
                            const update_pin_details = await Pin.findOne({pin: saved_user.pin})
                            update_pin_details.owner_id = saved_user._id
                            update_pin_details.save().then( updated => {
                                const api_res = {
                                    res: res,
                                    statusCode: 201,
                                    message: `${saved_user.email} signed up successfully, please proceed to verify your account within the next 10 days`,
                                    data: null
                                }
                                return api_response()
                            }).catch( err => {
                                return appError(err, next)
                            })
                        } catch (error) {
                            return appError(error, next)
                        }
                    }).catch( err => appError(err, next) )
                }).catch( err =>  appError(err, next))

                
            }
             
        }
    }
}


export default AuthController